/*
 * Ultralight Java - Java wrapper for the Ultralight web engine
 * Copyright (C) 2021 LabyMedia and contributors
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil */

#ifndef _Included_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
#    define _Included_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
#    ifdef __cplusplus
extern "C" {
#    endif
/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    createOpenGLContext
 * Signature: (JFZZ)J
 */
JNIEXPORT jlong JNICALL Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_createOpenGLContext(
    JNIEnv *e, jobject, jlong window, jboolean msaa);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    getDriverFromContext
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_getDriverFromContext(
    JNIEnv *, jobject, jlong contextHandle);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    beginSynchronize
 * Signature: (J)V
 */
JNIEXPORT void JNICALL
Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_beginSynchronize(JNIEnv *, jobject, jlong handle);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    endSynchronize
 * Signature: (J)V
 */
JNIEXPORT void JNICALL
Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_endSynchronize(JNIEnv *, jobject, jlong handle);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    hasCommandsPending
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL
Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_hasCommandsPending(JNIEnv *, jobject, jlong handle);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    drawCommandList
 * Signature: (J)V
 */
JNIEXPORT void JNICALL
Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_drawCommandList(JNIEnv *, jobject, jlong handle);

JNIEXPORT void JNICALL Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_setActiveWindow(
    JNIEnv *, jobject, jlong handle, jlong window);
JNIEXPORT void JNICALL Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_bindTexture(
    JNIEnv *, jobject, jlong handle, jlong textureId, jlong texture);

/*
 * Class:     com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil
 * Method:    getGlTextureId
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL
Java_com_labymedia_ultralight_gpu_UltralightGPUDriverNativeUtil_getGlTextureId(JNIEnv *, jobject, jlong handle, jlong texture);

#    ifdef __cplusplus
}
#    endif
#endif
