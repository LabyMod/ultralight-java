import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
    id 'maven-publish'
}

group 'net.labymedia'

def lwjglClassifier = {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "natives-windows"
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "natives-macos"
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "natives-linux"
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2', classifier: lwjglClassifier()

    implementation project(':ultralight-java-base')

    testImplementation project(':ultralight-java-databind')
    testImplementation group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2'
    testRuntimeOnly group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2', classifier: lwjglClassifier()
}

tasks.test.enabled = false

def runDir = file("run")
if(!runDir.exists() && !runDir.mkdirs()) {
    throw new GradleException("Failed to create run directory")
}

def ultralightOsIdentifier = {
    def bitName = (System.getProperty("os.arch", "?").contains("64") ||
            System.getProperty("sun.arch.data.model", "?").contains("64")) ? "64" : "32"

    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "win-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "mac-x" + bitName
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "linux-x" + bitName
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

task copyTestResources(type: Copy) {
    from new File(project(':ultralight-java-native').buildDir, "cmake-gen-${ultralightOsIdentifier()}/3rdparty/ultralight-${ultralightOsIdentifier()}/bin")
    include "**/*.dll", "resources/cacert.pem"
    into runDir
}

task runTest(type: JavaExec, dependsOn: [copyTestResources]) {
    classpath sourceSets.test.runtimeClasspath
    main "net.labymedia.ultralight.lwjgl3.opengl.TestRunner"
    jvmArgs "-Xmx3M"
    workingDir file("run")
}

task exportTestCommandLine {
    doLast {
        println tasks.runTest.commandLine.join(" ")
    }
}

task testJar(type: Jar) {
    sourceSets.test.runtimeClasspath.each {
        def target = file(it)

        if(!target.exists()) {
            return
        }

        if(target.isDirectory()) {
            from(fileTree(it))
        } else {
            from(zipTree(it))
        }
    }

    manifest {
        attributes(
                "Main-Class": "net.labymedia.ultralight.lwjgl3.opengl.TestRunner"
        )
    }
}