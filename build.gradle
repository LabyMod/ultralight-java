plugins {
    id 'maven-publish'
    id "net.minecrell.licenser" version "0.4.1" apply false
    id "signing"
}

group 'com.labymedia'
apply from: 'version.gradle'

static String getSigningProperty(String name) {
    return System.getenv("SIGNING_${name}")
}

String getAuthenticationProperty(String propName, String envName) {
    return project.hasProperty(propName) ? project.properties.get(propName) : System.getenv(envName)
}

ext.commonPublish = { Project currentProject, Closure config ->
    currentProject.publishing {
        repositories {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"

            if (!version.endsWith("-UNSTABLE")) {
                maven {
                    url version.endsWith("-SNAPSHOT") ? snapshotRepo : releaseRepo
                    name "OSS${version.endsWith("-SNAPSHOT") ? "Snapshots" : "Release"}HostingRepository"

                    credentials {
                        username getAuthenticationProperty("osshrUser", "OSSHR_USER")
                        password getAuthenticationProperty("osshrPassword", "OSSHR_PASSWORD")
                    }
                }

                maven {
                    setUrl(System.getenv("FLINT_DISTRIBUTOR_URL"))
                    name = "Flint"

                    def publishToken = System.getenv("FLINT_DISTRIBUTOR_PUBLISH_TOKEN")

                    if (publishToken == null && project.hasProperty("net.flintmc.distributor.publish-token")) {
                        publishToken = project.property("net.flintmc.distributor.publish-token").toString()
                    }

                    if (publishToken != null) {
                        credentials(HttpHeaderCredentials.class) {
                            name = "Publish-Token"
                            value = publishToken
                        }

                        authentication {
                            create("header", HttpHeaderAuthentication.class)
                        }
                    }
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from currentProject.components.java

                configure(it, config)

                version = rootProject.version

                pom {
                    url = "https://github.com/LabyMod/ultralight-java"

                    licenses {
                        license {
                            name = "LGPLv3"
                            url = "https://www.gnu.org/licenses/lgpl-3.0.txt"
                            distribution = "repo"
                        }
                    }

                    developers {
                        developer {
                            id = "LabyMedia"
                            email = "contact@labymod.net"
                        }
                    }

                    scm {
                        connection = "scm:git:git://github.com/LabyMod/ultralight-java.git"
                        developerConnection = "scm:git:ssh://github.com/LabyMod/ultralight-java.git"
                        url = "https://github.com/LabyMod/ultralight-java"
                    }
                }
            }
        }
    }

    if (rootProject.hasProperty("enableSigning")) {
        currentProject.signing {
            def signingKey = getSigningProperty("KEY")
            def signingPassword = getSigningProperty("PASSWORD")

            useInMemoryPgpKeys(signingKey, signingPassword)

            sign currentProject.publishing.publications.mavenJava
        }
    }
}

subprojects {
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    pluginManager.withPlugin("java") {
        apply plugin: "net.minecrell.licenser"
        apply plugin: "signing"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        license {
            header = rootProject.file("LICENSE_HEADER")

            ext {
                author = "LabyMedia"
                year = "2020 - " + Calendar.getInstance(TimeZone.getTimeZone("UTC")).get(Calendar.YEAR)
            }
        }

        java {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

subprojects {
    version = rootProject.version
}